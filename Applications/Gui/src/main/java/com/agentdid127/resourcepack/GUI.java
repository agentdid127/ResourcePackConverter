package com.agentdid127.resourcepack;

import com.agentdid127.resourcepack.backwards.BackwardsPackConverter;
import com.agentdid127.resourcepack.forwards.ForwardsPackConverter;
import com.agentdid127.resourcepack.library.utilities.Util;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import javax.swing.*;
import java.awt.*;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.nio.file.Paths;
import java.util.Arrays;

public class GUI {
    static JFrame frame;
    private JPanel panel1;
    private JComboBox<String> initialVersionBox;
    private JComboBox<String> finalVersionBox;
    private JTextArea outputArea;
    private JCheckBox minifyCheckBox;
    private JLabel finalVersionLabel;
    private JLabel initialVersionLabel;
    private JLabel outputLabel;
    private JButton convertButton;

    private PrintStream out;
    private GsonBuilder gsonBuilder = new GsonBuilder();
    private Gson gson = gsonBuilder.disableHtmlEscaping().create();

    public GUI() {
        String[] versions = Util.getSupportedVersions(gson);

        for (String item : versions) {
            initialVersionBox.addItem(item);
            finalVersionBox.addItem(item);
        }

        convertButton.addActionListener(e -> {
            out = redirectSystemStreams();

            String from = initialVersionBox.getSelectedItem().toString();
            String to = finalVersionBox.getSelectedItem().toString();
            String light = "none";

            boolean minify = minifyCheckBox.isSelected();
            new Thread(() -> {
                convertButton.setVisible(false);
                try {
                    if (Util.getVersionProtocol(gson, from) > Util.getVersionProtocol(gson, to))
                        new BackwardsPackConverter(from, to, light, minify, Paths.get("./"), true, out).runDir();
                    else
                        new ForwardsPackConverter(from, to, light, minify, Paths.get("./"), true, out).runDir();
                } catch (IOException ioException) {
                    out.println(Arrays.toString(ioException.getStackTrace()));
                }
                convertButton.setVisible(true);
                return;
            }).start();
        });
    }

    public static void main(String[] args) {
        frame = new JFrame("Resource Pack Converter");
        frame.setContentPane(new GUI().panel1);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
    }

    private void updateTextArea(final String text) {
        outputArea.append(text);
    }

    // Followings are The Methods that do the Redirect, you can simply Ignore them.
    private PrintStream redirectSystemStreams() {
        OutputStream out2 = new OutputStream() {
            @Override
            public void write(int b) throws IOException {
                updateTextArea(String.valueOf((char) b));
            }

            @Override
            public void write(byte[] b, int off, int len) throws IOException {
                updateTextArea(new String(b, off, len));
            }

            @Override
            public void write(byte[] b) throws IOException {
                write(b, 0, b.length);
            }
        };

        return new PrintStream(out2);
    }

    {
        // GUI initializer generated by IntelliJ IDEA GUI Designer
        // >>> IMPORTANT!! <<<
        // DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        panel1.setFocusable(true);
        panel1.setMaximumSize(new Dimension(700, 375));
        panel1.setMinimumSize(new Dimension(700, 375));
        panel1.setPreferredSize(new Dimension(700, 375));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        panel1.add(panel2);
        initialVersionBox = new JComboBox();
        panel2.add(initialVersionBox);
        initialVersionLabel = new JLabel();
        initialVersionLabel.setText("Initial Version");
        panel2.add(initialVersionLabel);
        finalVersionBox = new JComboBox();
        panel2.add(finalVersionBox);
        finalVersionLabel = new JLabel();
        finalVersionLabel.setText("Final Version");
        panel2.add(finalVersionLabel);
        minifyCheckBox = new JCheckBox();
        minifyCheckBox.setText("Minify");
        panel2.add(minifyCheckBox);
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        panel1.add(panel3);
        outputLabel = new JLabel();
        outputLabel.setText("Output");
        panel3.add(outputLabel);
        final JScrollPane scrollPane1 = new JScrollPane();
        panel3.add(scrollPane1);
        outputArea = new JTextArea();
        outputArea.setColumns(60);
        outputArea.setRows(15);
        outputArea.setText("");
        scrollPane1.setViewportView(outputArea);
        convertButton = new JButton();
        convertButton.setActionCommand("Convert");
        convertButton.setLabel("Convert");
        convertButton.setText("Convert");
        panel1.add(convertButton);
    }

    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }
}
